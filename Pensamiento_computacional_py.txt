¿Qué es un lenguaje de programación?
     Es un lenguaje formal que, mediante una serie de instrucciones, le permite a un programador 
     escribir un conjunto de órdenes, acciones consecutivas, datos y algoritmos para, de esa forma, 
     crear programas que controlen el comportamiento físico y lógico de una máquina.

¿Qué tipos de lenguaje de programación existen?
     El lenguaje de programación es la base para construir todas las aplicaciones digitales que se utilizan
     en el día a día y se clasifican en dos tipos principales: lenguaje de bajo nivel y de alto nivel.

Lenguaje de programación de bajo nivel
     Son lenguajes totalmente orientados a la máquina.
     Este lenguaje sirve de interfaz y crea un vínculo inseparable entre el hardware y el software.

Lenguaje de programación de alto nivel
     Tienen como objetivo facilitar el trabajo del programador, ya que utilizan unas instrucciones más fáciles de entender.

Lenguaje específico de dominio
     En desarrollo de software e ingeniería de dominio, un lenguaje específico de dominio, o “lenguaje específico 
     del dominio”,(en inglés domain-specific language, DSL) es un lenguaje de programación o especificación dedicado 
     a resolver un problema en particular, representar un problema específico y proveer una técnica para 
     solucionar una situación particular. El concepto no es nuevo pero se ha vuelto más popular debido al aumento
     del uso de modelaje específico del dominio.1​

Lenguaje de propósito general
     Se llama lenguaje de propósito general al lenguaje de programación cuyos procedimientos,
      instrucciones y estructuras de datos están diseñados para resolver todo tipo de problemas.

Lenguaje de interpretados y compilados
      La principal diferencia entre un lenguaje compilado y uno interpretado es que el lenguaje compilado 
      requiere un paso adicional antes de ser ejecutado, la compilación, que convierte el código que escribes 
      a lenguaje de máquina. Un lenguaje interpretado, por otro lado, es convertido a lenguaje de máquina a 
      medida que es ejecutado.
      
      Ejemplos de lenguajes compilados incluyen C, C++, Java, Go y Rust, entre muchos otros.
      
       Ejemplos de lenguajes interpretados incluyen Ruby, Python y JavaScript, entre muchos otros.
       
      A todos estos lenguajes se les conoce como lenguajes de alto nivel.

      1 + 1 # 1
      'Platzi' / 5 # Error
      'Platzi' * 3 #PlatziPlatziPlatzi

      #PrintStatement
      print('Hola mundo')
      'Mr' + '. Internatuta'
      2 + 2

¿Que es un objeto?
     Concepto, abstracción o cosa con límites bien definidos y con significado para el problema que se está manejando

-Tipos
    int.
    float.
    bool.
    str.

#Definiendo variables
    my_int  = 1
    my_float = 1.0
    my_bool = True
    my_none = None
    my_str = 'Hola'

#Imprimiendo el tipo
    type(my_int)
    type(my_float)
    type(my_bool)
    type(my_none)
    type(my_str)

¿Que pasa si ejecutas esto?
    1 + 1 
    2 - 5
    2.0 * 3
    6 // 2
    6 // 4
    6 / 4
    7 % 2
    2 ** 2

    Resultado

    >>> 1 + 1
    2
    >>> 2 - 5
    -3
    >>> 2.0 * 3  
    6.0
    >>> 6 // 2 
    3
    >>> 6 // 4
    1
    >>> 6 / 4
    1.5
    >>> 7 % 2
    1
    >>> 2 ** 2```

ITERACIONES
    *la mayoria de las tareas computacionales no se pueden 
     logar con ramificaciones.
     * Se utiliza las itraciones cuando quremos que se realize un proceso varias veces.
     *Se pueden escbir iteraciones sobre iteraciones.
     *Se utiliza break para salir anticipadamente de una iteraciones
     *tener cuidado con las iteraciones infinitas.

Representacion de Flotantes
     La mayoría del tiempo los números flotantes (tipo float) son una muy buena aproximación de los 
     números que queremos calcular con nuestras computadoras. Sin embargo, “la mayoría del tiempo” no
     significa todo el tiempo, y cuando no se comportan de esta manera puede tener consecuencias inesperadas.

     Por ejemplo, trata de correr el siguiente código:

     x = 0.0
     for i in range(10):
     x += 0.1

     if x == 1.0:
     print(f'x = {x}')
     else:
     print(f'x != {x}')


     Es probable que te hayas sorprendido con el resultado. La mayoría de nosotros esperaríamos que imprimiera 
     1.0 en vez de 0.999999999999. ¿Qué es lo que pasó?.Para entender qué es lo que pasó tenemos que entender que 
     es lo que pasa en la computadora cuando realizamos cómputos con números flotantes. Y para eso necesitamos entender 
     números binarios.

     Cuando aprendiste a contar, lo que en realidad aprendiste es una técnica combinatoria para manipular los siguientes
     símbolos que le llamamos números: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. La forma en la que funciona esta técnica es asignando 
     el número 10 a la 0 al número de la extrema derecha, 10 a la 1 al siguiente, 10 a la 2 al siguiente y así sucesivamente.
     De tal manera que el número 525 es simplemente la representación de (5 * 100) + (2 * 10) + (5 * 1).

     Esto nos dice que el número de números que podemos representar depende de cuanto espacio tengamos. Si tenemos un espacio de 3,
     podemos representar 1,000 números (10 elevado a la 3) o la secuencia del 0 al 999. Si tenemos 4, podemos representar 10,000 
     (10 elevado a la 4) o la secuencia del 0 al 9,999. De manera general podemos decir que con una secuencia de tamaño n, podemos 
     representar 10 elevado a la n números.

     Los números binarios funcionan de la misma manera (de hecho cualquier número en cualquier base, por ejemplo, octales o hexadecimales).
     La única diferencia es cuántos símbolos tenemos para representar. En binario nada más tenemos 0, 1; en hexadecimal tenemos 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f.

     De esta manera podemos decir que el número de la extrema derecha es cantidad_de_simbolos**0, cantidad_de_simbolos**1, cantidad_de_simbolos**2, etc.
     Por lo que en binario, que nada más tenemos 2 símbolos, decimos 2**0, 2**1, 2**2, etc. Por ejemplo el número binario 101 es la representación
     de (1 * 4) + (0 * 2) + (1 * 1), es decir 5. Esta representación nos permite trabajar con todos los números positivos enteros dentro del computador, 
     pero ¿Qué hacemos con los negativos y los racionales?.El caso de los números negativos es sencillo: simplemente agregamos un bit adicional que representa 
     el signo y la añadimos en la extrema izquierda. Por lo que el número 0101 sería +5 y el número 1101 sería -5.El caso de los racionales es más complejo.
     En la mayoría de los lenguajes de programación modernos los racionales utilizan una implementación llamada punto flotante. ¿Cómo funciona esta representación?.

     Antes de pasar a binario, vamos a pretender que estamos trabajando con una computadora basada en decimales. Un número flotante 
     lo representaríamos con un par de enteros: los dígitos significativos y el exponente. Por ejemplo, el número 2.345 se representaría
     como (2345 * 10**-3) o (2345, -3).

     El número de dígitos significativos determinan la precisión con la que podemos representar número. Por ejemplo si nada más 
     tuviéramos dos dígitos significativos el número 2.345 no se podría representar de manera exacta y tendríamos que convertirlo 
     a una aproximación, en este caso 2.3.
     
     Ahora pasemos a la verdadera representación interna de la computadora, que es en binario. ¿Cómo representarías el número 5/8 o 0.625?
     Lo primero que tenemos que saber es que 5/8 es en realidad el número 5 * 2**-3. Por lo que podríamos decir (101, -11)
     (recuerda que el número 5 es 101 en binario y el 3 es 11).

     Regresemos a nuestro problema inicial: ¿Cómo representaremos 1/10 (que escribimos en Python cómo 0.1)? Lo mejor que podemos hacer con
     cuatro dígitos significativos es (0011, -101) que es equivalente a 3/32 (0.09375). ¿Qué tal si tuviéramos cinco dígitos significativos? 
     La mejor representación sería (11001, -1000) que es equivalente a 25/256 (0.09765625). ¿Cuántos dígitos significativos necesitamos entonces?
     Un número infinito. No existe ningún número que cumpla con la siguiente ecuación: sim * 2**-exp.

     En la mayoría de las implementaciones de Python tenemos 53 bits de precisión para números flotantes.
     Así que los dígitos significativos para representar el número 0.1 es igual a:
     
     11001100110011001100110011001100110011001100110011001 que es equivalente al número decimal: 0.1000000000000000055511151231257827021181583404541015625

     Muy cercano a 1/10 pero no exactamente 1/10. Ahora ya sabemos la razón de esa respuesta tan extraña. Hay muy pocas situacione
     en la que 1.0 es aceptable, pero 0.9999999999999999 no. Pero ¿Cuál es la moraleja de esta historia?

     Hasta ahora hemos verificado igualdad con el operador ==. Sin embargo, cuando estamos trabajando con
      flotantes es mejor asegurarnos que los números sean aproximados en vez de idénticos. 
      
      Por ejemplo x < 1.0 and x > 0.99999.
     
ENUMERACIÓN EXHAUSTIVA
     * Tmbien llamado }"adivina y verifica", en donde se enumeran todas las posibilidades.
     * Uno de los primeros algoritmos que debes tratar.

APROXIMACION DE SOLUCIONES
     * Similar a enumeracion exhaustica, pero no necesita una respuesta exacta.
     * Podemos aproximar soluciones con un margen de error que llamaremos epsilon.

     * ¿que tan cerca queremos estar de esta solucioon? a la diferencia entre la realidad y la soluciones
        la llamos epsilon
     * Entre mas pequeño es epsilo, mas nos acercaremos a la solucion, pero utilizamos mas ciclos de codigo y mas  procesamiento.

BUSQUEDA BINARIA
     * Cuando se utiliza bsuqueda binaria, nuestro conjunto de numero esta ordenadon ej [1,2,3,4...]
     * Es altamente eficiente , pues corta el espacio de busqueda en dos por cada iteracion 

FUNCIONES
     Abstraccion: No necesitas saber como se implemento y el proceso de algo, sino unicamente se neceita saber como manejarlo
     Decomposicion: Permite dividir el codigo en componente que colaboran en computacionales
                    Se puede pensar en mini programas que juntas forman un programa mayor

     Recursividad: Se define de manera algoritmica o programatica

                  *De manera agoritmica es una forma de uitlizar soluciones utilizando "divide y venceras",
                   Encontrar una solucion base, para que iterativamente entoncotremos la solucion a el problema

                  *De manera programatica mediante la cual una funcion se llame a si misma.

               Factoriales (Recursividad):
                    
                    Revisar programa factoriale.py

               Fibonnacci y la Recursividad
                    La secuencia de Fibonacci es una función matemática que se define recursivamente. En el año 1202,
                    el matemático italiano Leonardo de Pisa, también conocido como Fibonacci, encontró una fórmula
                    para cuantificar el crecimiento que ciertas poblaciones experimentan.

                    Imagina que una pareja de conejos nace, un macho y una hembra, y luego son liberados. Imagina, también,
                    que los conejos se pueden reproducir hasta la edad de un mes y que tienen un periodo de gestación también 
                    de un mes. Por último imagina que estos conejos nunca mueren y que la hembra siempre es capaz de producir
                    una nueva pareja (un macho y una hembra). ¿Cuántos conejos existirán al final de seis meses?

                    Una forma de visualizar este crecimiento es mirándolo de forma tabular:
                              
                              Mes	Hembras
                              0	1
                              1	1
                              2	2
                              3	3
                              4	5
                              5	8
                              6	13
                    
                    Un punto importante a considerar es que para el mes n > 1, hembras(n) = hembras(n - 1) + hembras(n - 2).

                    Como podemos ver, tenemos una definición distinta a la de factorial que vimos anteriormente. 
                    En específico, tenemos dos casos base (0 y 1) y tenemos dos llamadas recursivas
                    (hembras(n - 1) + hembras(n - 2)).

                    Podemos crear una solución recursiva de manera sencilla:


                          def fibonacci(n):
                              if n == 0 or n == 1:
                                   return 1
                              return fibonacci(n - 1) + fibonacci(n - 2)

FUNCIONES COMO OBJETOS
     Una de las características más poderosas de Python es que todo es un objeto, incluyendo las funciones. 
     Las funciones en Python son “ciudadanos de primera clase”.
      Esto, en sentido amplio, significa que en Python las funciones:

          Tienen un tipo
          Se pueden pasar como argumentos de otras funciones
          Se pueden utilizar en expresiones
          Se pueden incluir en varias estructuras de datos (como listas, tuplas,
          diccionarios, etc.)

     Argumentos de otras funciones
          
          Hasta ahora hemos visto que las funciones pueden recibir parámetros para realizar los cómputos que definen.
          Algunos de los tipos que hemos pasado son tipos simples como cadenas, números, listas, etc. Sin embargo,
          también pueden recibir funciones para crear abstracciones más poderosas. Veamos un ejemplo:

               def multiplicar_por_dos(n):
                    return n * 2

               def sumar_dos(n):
                    return n + 2

               def aplicar_operacion(f, numeros):
                    resultados = []
                    for numero in numeros:
                         resultado = f(numero)
                         resultados.append(resultado)

               >>> nums = [1, 2, 3]
               >>> aplicar_operacion(multiplicar_por_dos, nums)
               [2, 4, 6]

               >>> aplicar_operacion(sumar_dos, nums)
               [3, 4, 5]

          Funciones en expresiones
              
               Una forma de definir una función en una expresión es utilizando el keyword lambda. 
               lambda tiene la siguiente sintaxis: lambda <vars>: <expresion>.

               Otro ejemplo interesante es que las funciones se pueden utilizar en una expresión directamente.
               Esto es posible ya que como lo hemos platicado con anterioridad, en Python las variables son 
               simplemente nombres que apuntan a un objeto (en este caso a una función). Por ejemplo:
                         
                         sumar = lambda x, y: x + y
                         >>> sumar(2, 3)
                         5

          Funciones en estructuras de datos

               Las funciones también se pueden incluir en diversas estructuras que las permiten almacenar. 
               Por ejemplo, una lista puede guardar diversas funciones a aplicar o un diccionario las puede 
               almacenar como valores.

                    def aplicar_operaciones(num):
                         operaciones = [abs, float]
                         resultado = []
                         for operacion in operaciones:
                               resultado.append(operacion(num))
                         return resultado

                    >>> aplicar_operaciones(-2)
                    [2, -2.0]

               Como pudimos ver, las funciones son objetos muy versátiles que nos permiten tratarlas de diversas 
               maneras y que nos permiten añadir capas adicionales de abstracción a nuestro programa.
              
TUPLAS
     Las tuplas son secuencias inmutables de objetos (pedazos de memoria).
     A diferencia de las cadenas pueden contener cuaquier tipo de objeto. 
     Pueden utilizarse para devolver varios valores en una funcion. 

          >>> my_tuple=()
          >>> my_tuple=(1,'dos',True)
          >>> my_tuple[0]
          1
          >>> my_tuple[1]
          'dos'
          >>> my_tuple[0]=2  #las tuplas son inmutables
          TypeError: 'tuple' object does not support item assignment 


          >>> mu_tuple=(1)
          >>> type(mu_tuple)
          <class 'int'>     #si se asigna un solo valor a una tupla python no lo reconoce
          >>> my_tuple=(1,)
          >>> type(my_tuple)
          <class 'tuple'>

          >>> my_other_tupl=(2,3,4)
           my_tuple += my_other_tupl
          >>> print(my_tuple) #las tuplas se pueden concatenar.
          (1, 2, 3, 4)

          >>> x,y,z=my_other_tupl
          >>> x
          2
          >>> y
          3
          >>> z
          4

          >>> def coordenadas():
          ...     return(5,4)
          >>> coordenada=coordenadas()
          >>> coordenada
          (5, 4)
          >>> x,y=coordenadas()
          >>> print(x,y)
          5 4

RANGOS



     Representean una secuencia de enteros, al igua que las rebanadas, podemos definirlos con el final y con los pasos 
     Al igual que las cadenas y las tuplas, son inmutables. 
     Tienen poco espacio en memoria, muy utilizado en for loops
     
          >>> my_range=range(0,7,2) #LLEGA HASTA EL 6 PORQUE EL EL ULTIMO DATO CORTA EL RANGO
          >>> my_other_range=(0,8,2)

          >>> my_range == my_other_range
          False

          >>> my_other_range=range(0,8,2) LLEGA HASTA EL 6 PORQUE EL EL ULTIMO DATO CORTA EL RANGO
          >>> my_range == my_other_range
          True

          >>> for i in my_range:
          ...     print(i)
       
          0
          2
          4
          6

          >>> for i in my_other_range:
          ...     print (i)
          ...
          0
          2
          4
          6

          >>> id(my_range) #LUGAR DE MEMORIA
          2353915993424

          >>> id(my_other_range) #UGAR DE MEMORIA
          2353915663584

          >>> my_range is my_other_range #SABER COMO DETERMIANR SI UN DATO NO ES EL MISMO A OTRO.
     
          False

lISTAS Y MUTABILIDAD
     * Las listas son secuencias de objetos, pero a diferencia de las tuplas, si son mutables.
     * Cuando modificas una lista, pueden existir efectos secundarios (side effects)
     * Es posible iterar con estos.

     MODIFICAR UNA lISTAS:

          * Asignar via indice (my_lista[0]=5)
          * Utilizar lso metodos de la lista (append, pop, remove, insert, etc)
          * Utilizar los metodos de la lista (append, pop, remove, insert,etc)

               >>> my_list=[1,2,3,4]
               >>> my_list[0]
               1
               >>> my_list[1:]
               [2, 3, 4]
               >>> my_list.append(4)
               >>> my_list
               [1, 2, 3, 4, 4]
               >>> my_list[4]=5
               >>> my_list
               [1, 2, 3, 4, 5]
               >>> my_list.pop()
               5
               >>> my_list
               [1, 2, 3, 4]


               >>> for element in my_list:
               ...     print(element)
               ...
               1
               2
               3
               4

               >>> a=[1,2,3]  
               >>> b=a      #la variable a y la variable b son literalmente la misma cosa, estan guardadas en la misma ubicacion
               >>> a is b   #HAY QUE TENER CUIDADO CON ESTO, PORQUE SI MODIFICAMOS a TABIEN SE MODIFICA b 
               True
               >>> id(a)
               1985653562624
               >>> id(b)
               1985653562624

               >>> c=[a,b]
               >>> c
               [[1, 2, 3], [1, 2, 3]]
               >>> a.append(5)
               >>> a
               [1, 2, 3, 5]
               >>> c
               [[1, 2, 3, 5], [1, 2, 3, 5]] #se modifico todo, eso es un error muy comun.

     CLONACION DE LISTAS
          Casi siempre es mejor clonar una lista en vez de mutarla
          Para clonar una lista podemos utilizar rebanadas(Slices) o la funcion list.
               
               >>> a=[1,2,3]
               >>> id(a)
               2768194808320
               >>> b=a
               >>> id(b)
               2768194808320
               >>> c=list(a)
               >>> a
               [1, 2, 3]
               >>> b
               [1, 2, 3]
               >>> c
               [1, 2, 3]
               >>> id(a)
               2768194808320
               >>> id(c)
               2768195117440
               >>> d=a[::]
               >>> d
               [1, 2, 3]
               >>> id(d)
               2768195083456

     LIST COMPREHENSION.
     
          * Es una forma concisa de aplicar operaicones a valores de un a secuencia.
          * Tambien se pueden aplicar condiciones para filtar a que valores para aplicar una operacion.


               >>> my_list=list(range(100))
               >>> my_list
               [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

               >>> double=[i*2 for i in my_list]
               >>> double
               [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198]

               >>> pares=[i for i in my_list if i % 2 == 0]
               >>> pares
               [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]

DICCIONARIOS

     * Son como listas, pero en lugar de usar indices utilizan llaves.
     * No tienen orden interno.
     * Los diccionarios son mutables.
     * Pueden Iterarse.
         
          >>> my_dict={
          ...     'David': 35,
          ...     'Erika': 32,
          ...     'Jaime':50,
          ... }
          >>> my_dict['David']
          35
          >>> my_dict['Erika']
          32
          >>> my_dict.get('Juan',30)
          30
          >>> my_dict.get('Jaime',30)
          50
          >>> my_dict.get('Ricardo',30)
          30    



          >>> my_dict['Jaime']=20
          >>> my_dict
          {'David': 35, 'Erika': 32, 'Jaime': 20}
          >>>


          >>> del my_dict['Jaime']
          >>> my_dict
          {'David': 35, 'Erika': 32}
          >>>
          
          >>> for llave in my_dict.keys():
          ...     print(llave)
          ...
          David
          Erika

          >>> for valor in my_dict.values():
          ...     print(valor)
          ...
          35
          32

          >>> for llave , valor in my_dict.items():
                  print(llave, valor)
          ...
          David 35
          Erika 32

          >>> my_dict
          {'David': 35, 'Erika': 32}
          >>> double=[i*2 for i in my_dict.values()]
          >>> double

          [70, 64]
          >>> pares=[i for i in my_dict.values() if i%2 == 0]
          >>> pares
          [32]

PRUEBAS DE CAJA NEGRA

     * Se basa en la especificaicon de la funcion o el programa
     * Prueba inputs y valida outputs
     * Unit Testing: Pruebas unitarias, prueban funcion por funcion, para determianr que cada parte del codigo del codigo funcione
     * Integration Testing: Todos los modulos funcionan entre si.

     REVISAR EL PROGRAMA caja_negra.py , verifica que los ciclos son correctos, si le damos valor absoluto a la suma de los dos numeros,
     podemos ver como el programa prueba cara funcion.

PRUEBAS DE CAJA DE CRISTAL
     * Se basan en el flujo del programa: A diferencia de las cajas negras, que especifican el programa, estas se basan en el flujo del programa.
     * Prueba todos los caminos posibles de una funcion, Ramificaciones, bucles for y while, recursion.
     * Regression testing o mocks: Nosotros descubrimos el problema una vez el programa y inicio.
     
Exepciones 
     
     *Son muy comunes en la programamcion. No tiene nada de excepcional
     *La execpciones de python normalmente se relacionan con errores de semantica
     *Se puede crear exepciones propaias
     *Cuando una excepcion no se maneja (Unhandled, exception), el programa termina en error.

     Manejo de execpciones

     *Las exepciones se manejan con keywords: try, except, finally.
     *Se pueden utilizar tambien para ramificar programas.
     *No deben manejarse de manera silenciona (por ejemplo, con print statements)
     *Para crear tu propia excepcion utiliza el keyword raise.


     










